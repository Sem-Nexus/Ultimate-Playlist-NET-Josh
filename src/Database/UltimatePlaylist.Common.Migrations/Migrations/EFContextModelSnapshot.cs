// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UltimatePlaylist.Database.Infrastructure.Context;

#nullable disable

namespace UltimatePlaylist.Database.Migrations.Migrations
{
    [DbContext(typeof(EFContext))]
    partial class EFContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("UltimatePlaylist.Database.Infrastructure.Entities.Dsp.UserDspEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("AccessTokenExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AppleUserToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("SpotifyAccessToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpotifyRefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpotifyScopes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpotifyTokenType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserPlaylistId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserSpotifyIdentity")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasAlternateKey("ExternalId");

                    b.HasIndex("UserId");

                    b.ToTable("UserDsp", (string)null);
                });

            modelBuilder.Entity("UltimatePlaylist.Database.Infrastructure.Entities.File.BaseFileEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Container")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Extension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasAlternateKey("ExternalId");

                    b.ToTable("File", (string)null);

                    b.HasDiscriminator<string>("Type");
                });

            modelBuilder.Entity("UltimatePlaylist.Database.Infrastructure.Entities.Games.GameBaseEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<DateTime>("GameDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasAlternateKey("ExternalId");

                    b.ToTable("Game", (string)null);

                    b.HasDiscriminator<string>("Type");
                });

            modelBuilder.Entity("UltimatePlaylist.Database.Infrastructure.Entities.Games.UserLotteryEntryEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<int>("FifthNumber")
                        .HasColumnType("int");

                    b.Property<int>("FirstNumber")
                        .HasColumnType("int");

                    b.Property<int>("FourthNumber")
                        .HasColumnType("int");

                    b.Property<long>("GameId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("SecondNumber")
                        .HasColumnType("int");

                    b.Property<int>("SixthNumber")
                        .HasColumnType("int");

                    b.Property<int>("ThirdNumber")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasAlternateKey("ExternalId");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId");

                    b.ToTable("UserLotteryEntry", (string)null);
                });

            modelBuilder.Entity("UltimatePlaylist.Database.Infrastructure.Entities.Games.WinningEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<long>("GameId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<long>("WinnerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasAlternateKey("ExternalId");

                    b.HasIndex("GameId");

                    b.HasIndex("WinnerId");

                    b.ToTable("Winning", (string)null);
                });

            modelBuilder.Entity("UltimatePlaylist.Database.Infrastructure.Entities.Identity.GenderEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasAlternateKey("ExternalId");

                    b.ToTable("Gender", (string)null);
                });

            modelBuilder.Entity("UltimatePlaylist.Database.Infrastructure.Entities.Identity.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("UltimatePlaylist.Database.Infrastructure.Entities.Identity.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<long?>("AvatarFileId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConfirmationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ConfirmationCodeExiprationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeviceToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<long?>("GenderId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAgeVerified")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmailChangeConfirmedFromWeb")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNotificationEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSmsPromotionalNotificationEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastActive")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewNotConfirmedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Pin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshTokenHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ResetTokenCodeExiprationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ShouldNotificationBeEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserToeknRequiredByWebConfirmation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AvatarFileId")
                        .IsUnique()
                        .HasFilter("[AvatarFileId] IS NOT NULL");

                    b.HasIndex("GenderId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("UltimatePlaylist.Database.Infrastructure.Entities.Identity.UserRole", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("UltimatePlaylist.Database.Infrastructure.Entities.Playlist.PlaylistEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFallback")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasAlternateKey("ExternalId");

                    b.ToTable("Playlist", (string)null);
                });

            modelBuilder.Entity("UltimatePlaylist.Database.Infrastructure.Entities.Playlist.PlaylistSongEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long?>("PlaylistId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<long?>("SongId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasAlternateKey("ExternalId");

                    b.HasIndex("PlaylistId");

                    b.HasIndex("SongId");

                    b.ToTable("PlaylistSong", (string)null);
                });

            modelBuilder.Entity("UltimatePlaylist.Database.Infrastructure.Entities.Playlist.UserPlaylistEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasAlternateKey("ExternalId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPlaylist", (string)null);
                });

            modelBuilder.Entity("UltimatePlaylist.Database.Infrastructure.Entities.Playlist.UserPlaylistSongEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSkipped")
                        .HasColumnType("bit");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int?>("SecondsListened")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SkipDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("SongId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UserPlaylistId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasAlternateKey("ExternalId");

                    b.HasIndex("IsFinished");

                    b.HasIndex("SongId");

                    b.HasIndex("UserPlaylistId");

                    b.ToTable("UserPlaylistSong", (string)null);
                });

            modelBuilder.Entity("UltimatePlaylist.Database.Infrastructure.Entities.Song.GenreEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasAlternateKey("ExternalId");

                    b.ToTable("Genre", (string)null);
                });

            modelBuilder.Entity("UltimatePlaylist.Database.Infrastructure.Entities.Song.SongDSPEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("DspType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("SongDspId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SongId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasAlternateKey("ExternalId");

                    b.HasIndex("SongId");

                    b.ToTable("SongDSP", (string)null);
                });

            modelBuilder.Entity("UltimatePlaylist.Database.Infrastructure.Entities.Song.SongEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Album")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Artist")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("AudioFileId")
                        .HasColumnType("bigint");

                    b.Property<long>("CoverFileId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<string>("FeaturedArtist")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FirstReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("HasExplicitContent")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasLegalClearance")
                        .HasColumnType("bit");

                    b.Property<bool>("HasSample")
                        .HasColumnType("bit");

                    b.Property<bool>("IsArtWorkOriginal")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAudioOriginal")
                        .HasColumnType("bit");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNewRelease")
                        .HasColumnType("bit");

                    b.Property<string>("Licensor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerLabel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Producer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Songwriter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasAlternateKey("ExternalId");

                    b.HasIndex("AudioFileId")
                        .IsUnique();

                    b.HasIndex("CoverFileId")
                        .IsUnique();

                    b.ToTable("Song", (string)null);
                });

            modelBuilder.Entity("UltimatePlaylist.Database.Infrastructure.Entities.Song.SongGenreEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<long?>("GenreId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long?>("SongId")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasAlternateKey("ExternalId");

                    b.HasIndex("GenreId");

                    b.HasIndex("SongId");

                    b.ToTable("SongGenre", (string)null);
                });

            modelBuilder.Entity("UltimatePlaylist.Database.Infrastructure.Entities.Song.SongSocialMediaEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long?>("SongId")
                        .HasColumnType("bigint");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasAlternateKey("ExternalId");

                    b.HasIndex("SongId");

                    b.ToTable("SongSocialMedia", (string)null);
                });

            modelBuilder.Entity("UltimatePlaylist.Database.Infrastructure.Entities.Ticket.TicketEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("EarnedType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UserPlaylistSongId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserSongHistoryId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasAlternateKey("ExternalId");

                    b.HasIndex("UserPlaylistSongId");

                    b.HasIndex("UserSongHistoryId");

                    b.ToTable("Ticket", (string)null);
                });

            modelBuilder.Entity("UltimatePlaylist.Database.Infrastructure.Entities.UserSongHistory.UserSongHistoryEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<Guid>("ExternalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<bool>("IsAddedToAppleMusic")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAddedToSpotify")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long?>("SongId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasAlternateKey("ExternalId");

                    b.HasIndex("SongId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSongHistory", (string)null);
                });

            modelBuilder.Entity("UltimatePlaylist.Database.Infrastructure.Views.GeneralSongDataProcedureView", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Album")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Artist")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("AverageRating")
                        .HasColumnType("float");

                    b.Property<string>("CoverUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Genre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Licensor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfTimesAddedToDSP")
                        .HasColumnType("int");

                    b.Property<int>("NumbersOfRate")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TotalTimeListened")
                        .HasColumnType("int");

                    b.Property<int>("UniquePlays")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("GeneralSongDataProcedureViews");
                });

            modelBuilder.Entity("UltimatePlaylist.Database.Infrastructure.Views.GeneralSongsAnalyticsFileInformationView", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Album")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Artist")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("AverageRating")
                        .HasColumnType("float");

                    b.Property<string>("CoverUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FirstReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Genre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasExplicitContent")
                        .HasColumnType("bit");

                    b.Property<bool?>("HasLegalClearance")
                        .HasColumnType("bit");

                    b.Property<bool>("HasSample")
                        .HasColumnType("bit");

                    b.Property<bool>("IsArtWorkOriginal")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAudioOriginal")
                        .HasColumnType("bit");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNewRelease")
                        .HasColumnType("bit");

                    b.Property<string>("Licensor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkToAppleMusic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkToSpotify")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfTimesAddedToDSP")
                        .HasColumnType("int");

                    b.Property<int>("NumbersOfRate")
                        .HasColumnType("int");

                    b.Property<string>("OwnerLabel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Producer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Songwriter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TotalTimeListened")
                        .HasColumnType("int");

                    b.Property<int>("UniquePlays")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("GeneralSongsAnalyticsFileInformationViews");
                });

            modelBuilder.Entity("UltimatePlaylist.Database.Infrastructure.Views.GeneralSongsCountProcedureView", b =>
                {
                    b.Property<int>("SongsCount")
                        .HasColumnType("int");

                    b.ToTable("GeneralSongsCountProcedureViews");
                });

            modelBuilder.Entity("UltimatePlaylist.Database.Infrastructure.Views.LeaderboardRankingBySongCountView", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("RankingPosition")
                        .HasColumnType("bigint");

                    b.Property<int>("SongCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToView("LeaderboardSongCountRanking");
                });

            modelBuilder.Entity("UltimatePlaylist.Database.Infrastructure.Views.LeaderboardRankingByTicketCountView", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("RankingPosition")
                        .HasColumnType("bigint");

                    b.Property<int>("TicketCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToView("LeaderboardTicketCountRanking");
                });

            modelBuilder.Entity("UltimatePlaylist.Database.Infrastructure.Views.ListenersStatisticsProcedureView", b =>
                {
                    b.Property<double>("AverageDailyPlaysPerUser")
                        .HasColumnType("float");

                    b.Property<double>("AverageTimeListenedUser")
                        .HasColumnType("float");

                    b.Property<double>("TotalAverageListeners")
                        .HasColumnType("float");

                    b.Property<int>("TotalDailyListeners")
                        .HasColumnType("int");

                    b.Property<int>("TotalListeners")
                        .HasColumnType("int");

                    b.Property<int>("TotalMaxListeners")
                        .HasColumnType("int");

                    b.ToTable("ListenersStatisticsProcedureViews");
                });

            modelBuilder.Entity("UltimatePlaylist.Database.Infrastructure.Views.SongPopularityView", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("Position")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToView("SongPopularity");
                });

            modelBuilder.Entity("UltimatePlaylist.Database.Infrastructure.Views.UserManagementProcedureView", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<double>("AvarageDailyPlays")
                        .HasColumnType("float");

                    b.Property<double>("AvarageTimeListened")
                        .HasColumnType("float");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ExternalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastActive")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TotalMinutesListened")
                        .HasColumnType("float");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserManagementProcedureViews");
                });

            modelBuilder.Entity("UltimatePlaylist.Database.Infrastructure.Views.UserManagementProcedureViewCount", b =>
                {
                    b.Property<int>("UserCount")
                        .HasColumnType("int");

                    b.ToTable("UserManagementProcedureCountViews");
                });

            modelBuilder.Entity("UltimatePlaylist.Database.Infrastructure.Entities.File.AudioFileEntity", b =>
                {
                    b.HasBaseType("UltimatePlaylist.Database.Infrastructure.Entities.File.BaseFileEntity");

                    b.Property<string>("InputAssetName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InputContainerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobErrorCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutputAssetName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OutputContainerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SongId")
                        .HasColumnType("bigint");

                    b.Property<string>("StreamingUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransformName")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("AudioFile");
                });

            modelBuilder.Entity("UltimatePlaylist.Database.Infrastructure.Entities.File.AvatarFileEntity", b =>
                {
                    b.HasBaseType("UltimatePlaylist.Database.Infrastructure.Entities.File.BaseFileEntity");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasDiscriminator().HasValue("Avatar");
                });

            modelBuilder.Entity("UltimatePlaylist.Database.Infrastructure.Entities.File.CoverFileEntity", b =>
                {
                    b.HasBaseType("UltimatePlaylist.Database.Infrastructure.Entities.File.BaseFileEntity");

                    b.Property<long?>("SongId")
                        .HasColumnType("bigint")
                        .HasColumnName("CoverFileEntity_SongId");

                    b.HasDiscriminator().HasValue("TrackCover");
                });

            modelBuilder.Entity("UltimatePlaylist.Database.Infrastructure.Entities.Games.DailyCashDrawingEntity", b =>
                {
                    b.HasBaseType("UltimatePlaylist.Database.Infrastructure.Entities.Games.GameBaseEntity");

                    b.HasDiscriminator().HasValue("DailyCashDrawing");
                });

            modelBuilder.Entity("UltimatePlaylist.Database.Infrastructure.Entities.Games.UltimatePayoutEntity", b =>
                {
                    b.HasBaseType("UltimatePlaylist.Database.Infrastructure.Entities.Games.GameBaseEntity");

                    b.Property<int>("FifthNumber")
                        .HasColumnType("int");

                    b.Property<int>("FirstNumber")
                        .HasColumnType("int");

                    b.Property<int>("FourthNumber")
                        .HasColumnType("int");

                    b.Property<decimal>("Reward")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SecondNumber")
                        .HasColumnType("int");

                    b.Property<int>("SixthNumber")
                        .HasColumnType("int");

                    b.Property<int>("ThirdNumber")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("UltimatePayout");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("UltimatePlaylist.Database.Infrastructure.Entities.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("UltimatePlaylist.Database.Infrastructure.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("UltimatePlaylist.Database.Infrastructure.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("UltimatePlaylist.Database.Infrastructure.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UltimatePlaylist.Database.Infrastructure.Entities.Dsp.UserDspEntity", b =>
                {
                    b.HasOne("UltimatePlaylist.Database.Infrastructure.Entities.Identity.User", "User")
                        .WithMany("Dsps")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UltimatePlaylist.Database.Infrastructure.Entities.Games.UserLotteryEntryEntity", b =>
                {
                    b.HasOne("UltimatePlaylist.Database.Infrastructure.Entities.Games.UltimatePayoutEntity", "Game")
                        .WithMany("UserLotteryEntries")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UltimatePlaylist.Database.Infrastructure.Entities.Identity.User", "User")
                        .WithMany("UserLotteryEntries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UltimatePlaylist.Database.Infrastructure.Entities.Games.WinningEntity", b =>
                {
                    b.HasOne("UltimatePlaylist.Database.Infrastructure.Entities.Games.GameBaseEntity", "Game")
                        .WithMany("Winnings")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UltimatePlaylist.Database.Infrastructure.Entities.Identity.User", "Winner")
                        .WithMany("Winnings")
                        .HasForeignKey("WinnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Winner");
                });

            modelBuilder.Entity("UltimatePlaylist.Database.Infrastructure.Entities.Identity.User", b =>
                {
                    b.HasOne("UltimatePlaylist.Database.Infrastructure.Entities.File.AvatarFileEntity", "AvatarFile")
                        .WithOne("User")
                        .HasForeignKey("UltimatePlaylist.Database.Infrastructure.Entities.Identity.User", "AvatarFileId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("UltimatePlaylist.Database.Infrastructure.Entities.Identity.GenderEntity", "Gender")
                        .WithMany("Users")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvatarFile");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("UltimatePlaylist.Database.Infrastructure.Entities.Identity.UserRole", b =>
                {
                    b.HasOne("UltimatePlaylist.Database.Infrastructure.Entities.Identity.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UltimatePlaylist.Database.Infrastructure.Entities.Identity.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UltimatePlaylist.Database.Infrastructure.Entities.Playlist.PlaylistSongEntity", b =>
                {
                    b.HasOne("UltimatePlaylist.Database.Infrastructure.Entities.Playlist.PlaylistEntity", "Playlist")
                        .WithMany("PlaylistSongs")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UltimatePlaylist.Database.Infrastructure.Entities.Song.SongEntity", "Song")
                        .WithMany("PlaylistSongs")
                        .HasForeignKey("SongId");

                    b.Navigation("Playlist");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("UltimatePlaylist.Database.Infrastructure.Entities.Playlist.UserPlaylistEntity", b =>
                {
                    b.HasOne("UltimatePlaylist.Database.Infrastructure.Entities.Identity.User", "User")
                        .WithMany("UserPlaylists")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UltimatePlaylist.Database.Infrastructure.Entities.Playlist.UserPlaylistSongEntity", b =>
                {
                    b.HasOne("UltimatePlaylist.Database.Infrastructure.Entities.Song.SongEntity", "Song")
                        .WithMany("UserPlaylistSongs")
                        .HasForeignKey("SongId");

                    b.HasOne("UltimatePlaylist.Database.Infrastructure.Entities.Playlist.UserPlaylistEntity", "UserPlaylist")
                        .WithMany("UserPlaylistSongs")
                        .HasForeignKey("UserPlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Song");

                    b.Navigation("UserPlaylist");
                });

            modelBuilder.Entity("UltimatePlaylist.Database.Infrastructure.Entities.Song.SongDSPEntity", b =>
                {
                    b.HasOne("UltimatePlaylist.Database.Infrastructure.Entities.Song.SongEntity", "Song")
                        .WithMany("SongDSPs")
                        .HasForeignKey("SongId");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("UltimatePlaylist.Database.Infrastructure.Entities.Song.SongEntity", b =>
                {
                    b.HasOne("UltimatePlaylist.Database.Infrastructure.Entities.File.AudioFileEntity", "AudioFile")
                        .WithOne("Song")
                        .HasForeignKey("UltimatePlaylist.Database.Infrastructure.Entities.Song.SongEntity", "AudioFileId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("UltimatePlaylist.Database.Infrastructure.Entities.File.CoverFileEntity", "CoverFile")
                        .WithOne("Song")
                        .HasForeignKey("UltimatePlaylist.Database.Infrastructure.Entities.Song.SongEntity", "CoverFileId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AudioFile");

                    b.Navigation("CoverFile");
                });

            modelBuilder.Entity("UltimatePlaylist.Database.Infrastructure.Entities.Song.SongGenreEntity", b =>
                {
                    b.HasOne("UltimatePlaylist.Database.Infrastructure.Entities.Song.GenreEntity", "Genre")
                        .WithMany("SongGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UltimatePlaylist.Database.Infrastructure.Entities.Song.SongEntity", "Song")
                        .WithMany("SongGenres")
                        .HasForeignKey("SongId");

                    b.Navigation("Genre");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("UltimatePlaylist.Database.Infrastructure.Entities.Song.SongSocialMediaEntity", b =>
                {
                    b.HasOne("UltimatePlaylist.Database.Infrastructure.Entities.Song.SongEntity", "Song")
                        .WithMany("SongSocialMedias")
                        .HasForeignKey("SongId");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("UltimatePlaylist.Database.Infrastructure.Entities.Ticket.TicketEntity", b =>
                {
                    b.HasOne("UltimatePlaylist.Database.Infrastructure.Entities.Playlist.UserPlaylistSongEntity", "UserPlaylistSong")
                        .WithMany("Tickets")
                        .HasForeignKey("UserPlaylistSongId");

                    b.HasOne("UltimatePlaylist.Database.Infrastructure.Entities.UserSongHistory.UserSongHistoryEntity", "UserSongHistory")
                        .WithMany("Tickets")
                        .HasForeignKey("UserSongHistoryId");

                    b.Navigation("UserPlaylistSong");

                    b.Navigation("UserSongHistory");
                });

            modelBuilder.Entity("UltimatePlaylist.Database.Infrastructure.Entities.UserSongHistory.UserSongHistoryEntity", b =>
                {
                    b.HasOne("UltimatePlaylist.Database.Infrastructure.Entities.Song.SongEntity", "Song")
                        .WithMany("UserSongHistory")
                        .HasForeignKey("SongId");

                    b.HasOne("UltimatePlaylist.Database.Infrastructure.Entities.Identity.User", "User")
                        .WithMany("UserSongsHistory")
                        .HasForeignKey("UserId");

                    b.Navigation("Song");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UltimatePlaylist.Database.Infrastructure.Entities.Games.GameBaseEntity", b =>
                {
                    b.Navigation("Winnings");
                });

            modelBuilder.Entity("UltimatePlaylist.Database.Infrastructure.Entities.Identity.GenderEntity", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("UltimatePlaylist.Database.Infrastructure.Entities.Identity.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("UltimatePlaylist.Database.Infrastructure.Entities.Identity.User", b =>
                {
                    b.Navigation("Dsps");

                    b.Navigation("Roles");

                    b.Navigation("UserLotteryEntries");

                    b.Navigation("UserPlaylists");

                    b.Navigation("UserSongsHistory");

                    b.Navigation("Winnings");
                });

            modelBuilder.Entity("UltimatePlaylist.Database.Infrastructure.Entities.Playlist.PlaylistEntity", b =>
                {
                    b.Navigation("PlaylistSongs");
                });

            modelBuilder.Entity("UltimatePlaylist.Database.Infrastructure.Entities.Playlist.UserPlaylistEntity", b =>
                {
                    b.Navigation("UserPlaylistSongs");
                });

            modelBuilder.Entity("UltimatePlaylist.Database.Infrastructure.Entities.Playlist.UserPlaylistSongEntity", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("UltimatePlaylist.Database.Infrastructure.Entities.Song.GenreEntity", b =>
                {
                    b.Navigation("SongGenres");
                });

            modelBuilder.Entity("UltimatePlaylist.Database.Infrastructure.Entities.Song.SongEntity", b =>
                {
                    b.Navigation("PlaylistSongs");

                    b.Navigation("SongDSPs");

                    b.Navigation("SongGenres");

                    b.Navigation("SongSocialMedias");

                    b.Navigation("UserPlaylistSongs");

                    b.Navigation("UserSongHistory");
                });

            modelBuilder.Entity("UltimatePlaylist.Database.Infrastructure.Entities.UserSongHistory.UserSongHistoryEntity", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("UltimatePlaylist.Database.Infrastructure.Entities.File.AudioFileEntity", b =>
                {
                    b.Navigation("Song");
                });

            modelBuilder.Entity("UltimatePlaylist.Database.Infrastructure.Entities.File.AvatarFileEntity", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("UltimatePlaylist.Database.Infrastructure.Entities.File.CoverFileEntity", b =>
                {
                    b.Navigation("Song");
                });

            modelBuilder.Entity("UltimatePlaylist.Database.Infrastructure.Entities.Games.UltimatePayoutEntity", b =>
                {
                    b.Navigation("UserLotteryEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
